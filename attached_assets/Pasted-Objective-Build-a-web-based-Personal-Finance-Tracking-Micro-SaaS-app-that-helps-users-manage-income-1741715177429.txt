Objective: Build a web-based Personal Finance Tracking Micro SaaS app that helps users manage income, expenses, and savings goals, with a subscription-based export feature.

Requirements
Inputs
User Authentication:
Email and password for signup/login (store securely with hashing).
Optional: Google OAuth for quick signup.
Finance Inputs:
Income: Monthly amount (numeric, in user-selected currency: USD, EUR, or LKR).
Expenses: Add multiple entries with:
Amount (numeric).
Category (dropdown: e.g., Food, Rent, Utilities, Entertainment, Other).
Date (default to today, editable).
Savings Goal: Optional target amount and deadline (e.g., “$5,000 by Dec 31, 2025”).
Currency: User selects from USD, EUR, or LKR (default to USD).
Core Features
Dashboard:
Display:
Total monthly income.
Total monthly expenses (sum of all entries).
Net savings (income - expenses).
Savings goal progress (e.g., “$2,000 / $5,000, 40%” with a progress bar).
Filter expenses by month (dropdown: last 12 months).
Expense Tracking:
Add, edit, or delete expense entries.
Show a table of expenses with columns: Date, Category, Amount, Actions (edit/delete).
Savings Goal:
Calculate monthly savings needed to meet the goal (e.g., “Save $250/month for 20 months”).
Alert if current net savings fall short of the required monthly amount.
Currency Conversion:
If user switches currency (e.g., USD to LKR), convert all stored amounts using a hardcoded exchange rate (e.g., 1 USD = 300 LKR, 1 EUR = 330 LKR, 1 USD = 0.95 EUR).
Display converted totals on the dashboard.
Subscription Feature
Free Tier: Basic tracking and dashboard.
Paid Tier (e.g., $5/month):
Unlock PDF export of monthly finance summary (income, expenses by category, savings progress).
Use Stripe for payment integration (mock it if real API access isn’t available).
Calculation Logic
Monthly income is static unless updated.
Expenses are summed per month based on entry dates.
Net savings = income - total expenses.
Savings goal progress = (cumulative net savings / goal amount) * 100.
Monthly savings needed = (remaining goal amount) / (months until deadline).
Output
Dashboard: Real-time summary with totals and progress bar.
Expense Table: Filterable list of entries.
PDF Export (Paid):
Header: “Monthly Finance Report - [Month/Year]”.
Sections: Income, Expenses (grouped by category), Net Savings, Savings Goal Progress.
Footer: “Generated by [App Name]”.
Implementation Details
Frontend:
Use HTML/CSS with Bootstrap for a responsive, clean UI.
JavaScript (Vanilla or React) for dynamic updates (e.g., dashboard, expense table).
Backend:
Use Flask (Python) or Node.js/Express (JavaScript).
REST API endpoints:
/auth/signup, /auth/login (POST).
/income (POST/GET/PUT).
/expenses (POST/GET/PUT/DELETE).
/savings-goal (POST/GET/PUT).
/export/pdf (GET, paid tier only).
Database:
SQLite for simplicity (or MongoDB if using Node.js).
Tables/Collections:
users: id, email, hashed_password, currency.
income: user_id, amount, currency, updated_at.
expenses: user_id, amount, category, date, currency.
savings_goals: user_id, target_amount, deadline, currency.
PDF Generation:
Use ReportLab (Python) or jspdf (JavaScript).
Include all dashboard data + expense breakdown.
Security:
Hash passwords (e.g., bcrypt).
Validate inputs (numeric amounts, valid dates, non-empty fields).
Rate-limit API endpoints to prevent abuse.
Bonus Features
Charts: Add a pie chart (e.g., Chart.js) showing expense breakdown by category.
Notifications: Friendly messages (e.g., “You’re on track!” or “You need to save $50 more/month”).
CSV Import: Allow users to upload a CSV of expenses (format: date,category,amount).
Dark Mode: Toggle for UI theme.
Deliverable
Complete source code:
Frontend (HTML/CSS/JS or React).
Backend (Flask or Node.js with API routes).
Database schema/setup.
PDF generation script.
Basic README:
Setup instructions (e.g., npm install, python -m flask run).
Dependencies list.
How to run locally.
Additional Notes
Use placeholder exchange rates (USD:LKR = 300, EUR:LKR = 330, USD:EUR = 0.95) unless an API is specified.
Round all monetary values to 2 decimal places (e.g., $123.45).
Style outputs with currency symbols (e.g., “$1,234.56”, “LKR 10,000.00”).
Ensure the app is responsive for mobile and desktop.
Task: Generate the complete source code for this Personal Finance Tracking Micro SaaS app, adhering to the above requirements and implementation details.